# -*- mode: org; ispell-change-dictionary: en;  -*- 
#+TITLE: Java Beans & Reflection
#+LANGUAGE: en
#+OPTIONS: toc:nil num:nil H:4 ^:nil pri:t
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://gongzhitaao.org/orgcss/org.css"/>

* Exercise 1 [Compulsory]

  Create the non-visual Java bean ~TempSensor~ that implements a
  temperature sensor (if you use ~NetBeans~ create the bean in the
  project ~TempSensor~ and in the package ~tempsensor~). The idea is
  that this bean periodically, for example every second, reads the
  current temperature and makes it available as the property
  ~currentTemp~ of type ~float~. The class ~TempSensor~ must have also
  the method ~void go()~ that starts the sensing. To implement the
  sensing use the class [[https://docs.oracle.com/javase/8/docs/api/java/util/Timer.html][Timer]] to periodically generate a random
  ~float~ value in the range ~[-20,50]~ through the class [[https://docs.oracle.com/javase/8/docs/api/java/util/Random.html][Random]] and
  assign it to the property ~currentTemp~. Note that every time the
  value of ~currentTemp~ changes ~TempSensor~ must notify that event
  through a ~PropertyChangeEvent~. Export the bean ~TempSensor~ 
  [[Exercise 1]] in the ~jar~ file ~TempSensor.jar~.
  
  *Solution format*: Source java file ~TempSensor.java~, adequately 
  commented, and  jar file ~TempSensor.jar~.
  
* Exercise 2 [Compulsory]

  Import the bean ~TempSensor~ of [[Exercise 1]] from the jar file
  inside the palette of ~NetBeans~.
  Create the project ~TempViewer~ and the class ~TempFrame~ that
  extends a ~JFrame~. Add to this frame a ~JLabel~, a ~JButton~ and
  the ~TempSensor~. The idea is that when the user clicks on the
  button the ~TempSensor~ starts the sensing and the label shows the
  values periodically generated by ~TempSensor~. To do that, link the
  property ~currentTemp~ of ~TempSensor~ with the property ~text~ of
  ~JLabel~. Export the project in the jar file ~TempViewer.jar~.

  *Solution format*: Source java files, adequately commented, and  
  jar file ~TempViewer.jar~.
 
* Exercise 3 [Optional]

  Create a Java bean ~TempSensorVetoable~ which extends the bean ~TempSensor~
  of the [[Exercise 1]] by making the property ~currentTemp~ *constrained*, 
  i.e., by allowing objects that register as ~vetoableChangeListener~
  to block the modification of the property. 
  In order to test the modified bean, modify (a copy of) the ~TempViewer~
  project by adding a ~JToggleButton~. Only when this button is pressed, 
  the changes to the property ~currentTemp~ of ~TempSensorVetoable~
  are constrained to be in the range ~[0,30]~. 

  *Solution format*: Source java files, adequately commented, and  
  jar file of the project.

  
* Exercise 4 [Compulsory]

  Write the Java program ~ExecTest~ that takes as arguments the names
  of other Java classes. For each class name, ~ExecTest~ loads the
  corresponding class, say it ~C~, by using the reflection API. After
  loading ~C~, ~ExecTest~ must create a new instance ~t~ of ~C~, must
  search and invoke on ~t~ all the non ~private~ methods with no
  arguments whose name starts with ~test~. Test your program using the
  provided class ~ClassWithTest~ either setting the ~Arguments~ field
  in the ~Project Properties~ configuration window of ~NetBeans~ or
  running in a shell the command

#+BEGIN_SRC sh 
      java ExecTest ClassWithTest
#+END_SRC

  The expected output should be 
#+RESULTS:
#+begin_example
Tests ready to run
Invocation of testAbs
abs(-2) = 2: ok
abs(-3) = -2: no
Invocation of testRound
round(0.7) = 1: ok
round(0.2) = 1: no
Invocation of testMin
min(7,3) = 3: ok
min(5,7) = 7: no
Invocation of testMax
max(7,14) = 14: ok
max(5,7) = 5: no
#+end_example

  *Solution format*: Source java files, adequately commented.
  
* Exercise 5 [Optional]

  Write the Java program ~CheckNPE~ that takes as arguments the names
  of other Java classes. For each method or constructor declared in ~C~
  which has at least one parameter of a reference type, ~CheckNPE~ checks
  if it is /NPE sensible/, that is, if invoking the constructor or method with
  /default parameter values/ a 
  ~NullPointerException~ is thrown. The default value of a numeric 
  primitive type parameter is ~0~, of a ~boolean~ parameter il ~false~, 
  ot a reference type parameter is ~null~.
  For each class name passed as parameter, ~CheckNPE~ must print for each
  declared constructor or method 
    1) the name 
    2) the list of parameter types
    3) if it is /NPE sensible/ or not, when it has at least one parameter of
       a reference type.

  *Solution format*: Source java files, adequately commented.




  
  
